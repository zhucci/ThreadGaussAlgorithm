#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#define _REENTRANT
#include <pthread.h>
#include <sched.h>
#include <semaphore.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>
#include <new>

typedef struct {
  pthread_t tid;
  int first;
  int last;
  } ThreadRecord;

int N;	// Размер матрицы A и векторов B, C
double *A, *B, *C;

int done=0;
ThreadRecord *threads; // Массив индексов границ лент матрицы
pthread_barrier_t barr1, barr2;

void *
mysolver (void *arg_p) {
  ThreadRecord *thr;
  char numbs[] = {'1','2','3','4','5','6','7','8','9','0'};
  int i, j;

  thr = (ThreadRecord *)arg_p;

  while ( !done ) {
    pthread_barrier_wait(&barr1);
    write (1, numbs, thr->tid);
    write (1, "\n", 1);
    for (i=thr->first; i<=thr->last; i++) {
      C[i] = 0;
      for (j=0; j<=N; j++)
        C[i] += A[N*i+j]*B[j];
      };
    pthread_barrier_wait(&barr2);
    };
  }

int
main (int argc, char* argv[]) {
  int nt;	// Кол-во расчетных потоков
  int nc;	// Кол-во циклов
  int i, j, k;

  pthread_attr_t pattr;

  if (argc != 4) {
    fprintf(stderr, "Исп: %s размерность #потоков #циклов\n", argv[0]);
    exit (1);
    };

  N = atoi(argv[1]);
  nt = atoi(argv[2]);
  nc = atoi(argv[3]);

  if ( N%nt ) {
    fprintf(stderr, "Размерность д.б. кратна кол-ву потоков\n");
    exit (2);
    };

  // Выделение памяти
  A = static_cast<double *>(::operator new(sizeof(double)*N*N));
  B = (double *) ::operator new(sizeof(double)*N );
  C = (double *) ::operator new( sizeof(double)*N );

  // Инициализация A и B случ. значениями
  srand(time(NULL));
  for (i=0; i<N; i++) {
    B[i] = (double) rand();
    for (j=0; j<N; j++)
      A[i*N+j] = (double) rand();
    };

  pthread_attr_init (&pattr);
  pthread_attr_setscope (&pattr, PTHREAD_SCOPE_SYSTEM);
  pthread_attr_setdetachstate (&pattr,PTHREAD_CREATE_JOINABLE);

  threads = (ThreadRecord *) calloc (nt, sizeof(ThreadRecord));

  pthread_barrier_init(&barr1, NULL, nt+1);
  pthread_barrier_init(&barr2, NULL, nt+1);

  j = N/nt;
  for (i=0; i<nt; i++) {
    threads[i].first = j*i; // Индекс нач. строки А для потока
    threads[i].last = j*(i+1)-1; // Индекс конечн. строки А для потока
    if ( pthread_create (&(threads[i].tid), &pattr, mysolver, (void *) &(threads[i])) )
      perror("pthread_create");
    };
  
  pthread_barrier_wait(&barr1); // Старт расчетов

  for (k=1; k<nc; k++) {
    pthread_barrier_wait(&barr2);
write(1, "---------\n", 10);

    for (j=0; j<N; j++)
        B[j] = (double) rand();

    pthread_barrier_wait(&barr1);
    };
  done = 1;

  exit (0);
  }
